// EVENTS –Ω–∞–∑–∏–≤–∞—î–º–æ, –ø—Ä–æ–ø–∏—Å—É—î–º–æ —â–æ –º–∞—î —Ä–æ–±–∏—Ç–∏—Å—å —ñ –º–æ–∂–µ–º–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ü–µ–π —ñ–≤–µ–Ω—Ç –≤ —ñ–Ω—à —Ñ–∞–π–ª–∞—Ö,
const events = require('node:events');

const eventEmitter = new events();

eventEmitter.on('click', (data)=>{
  console.log(data)
  console.log('Click click click');
}) // —â–æ –±—É–¥–µ –ø—Ä–∏ –≤–∏–∫–ª–∏—Ü—ñ eventEmitter —â–æ –¥–æ—Ä—ñ–≤–Ω—é—î = new events()

eventEmitter.emit('click', { data: "Hello" });
eventEmitter.emit('click');
eventEmitter.emit('click'); // –≤–∏–∫–ª–∏–∫ —Å–∞–º–æ–≥–æ —ñ–≤–µ–Ω—Ç—É
eventEmitter.emit('click');
eventEmitter.emit('click');

console.log(eventEmitter.eventNames());

eventEmitter.once('clickAndDie', ()=>{
  console.log('Clicked and died');
}) // –≤–∏–∫–ª–∏—á–∏—Ç—å—Å—è —ñ–≤–µ–Ω—Ç –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑, –≤ –ø–æ–¥–∞–ª—å—à–æ–º—É –Ω–µ –∑–º–æ–∂–µ–º–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ü–µ–π —Å–∞–º–∏–π —ñ–≤–µ–Ω—Ç, —Ç–æ–±—Ç–æ –≤—ñ–Ω —Ä–∞–∑ –ø—Ä–∞—Ü—é—î —ñ –ø–æ–º–∏—Ä–∞—î

console.log(eventEmitter.eventNames());

eventEmitter.emit('clickAndDie');
eventEmitter.emit('clickAndDie');
eventEmitter.emit('clickAndDie');
eventEmitter.emit('clickAndDie');

console.log(eventEmitter.eventNames());

// STREAM —Å—Ç—Ä—ñ–º–∏ - —è–∫ –≤ —é—Ç—É–±—ñ, –∫–æ–ª–∏ –º–∏ –æ—Ç—Ä–∏–º—É—î–º–æ –Ω–µ —Ñ–µ—Å—å —Ñ–∞–π–ª –∞ —á–∞—Å—Ç–∏–Ω–∞–º–∏ (–ø–µ–≤–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É), –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ —Ç–æ–≥–æ —è–∫ –≤–∂–µ
// –ø–µ—Ä—à—É —á–∞—Å—Ç–∏–Ω—É –¥–∏–≤–∏–º–æ—Å—å —ñ–Ω—à–∞ –ø—ñ–¥–≥—Ä—É–∂–∞—î—Ç—å—Å—è

const fs = require('fs');

const readStream = fs.createReadStream('text.txt'); // —Ñ–∞–π–ª –∑ —è–∫–æ–≥–æ —á–∏—Ç–∞—î–º–æ –¥–∞–Ω—ñ
const writeStream = fs.createWriteStream('text2.txt'); // –∑–∞–ø–∏—Å—É—î–º–æ –¥–∞–Ω—ñ –∑ —Å—Ç—Ä—ñ–º–∞, –∫–æ–∂–Ω–∏—É —á–∞—Å—Ç–∏–Ω–∫—É chunk –≤ –ø–µ–≤–Ω–∏–π —Ñ–∞–π–ª

readStream.on('data', (chunk)=>{
  console.log(chunk);
  writeStream.write(chunk)
}) // chunk - —Ü–µ —á–∞—Å—Ç–∏–Ω–∫–∏ —ñ–Ω—Ñ–∏ –∑ —Ñ–∞–π–ª—É —è–∫—ñ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è, —ó—Ö —Ç–∞–∫–∏—Ö –±–∞–≥–∞—Ç–æ

readStream
  .on('error', ()=>{
    readStream.destroy();  // –∑–Ω–∏—â—É—î —Ä—ñ–¥—Å—Ç—Ä—ñ–º, —â–æ –± –Ω–µ —Ö–∞–≤–∞–ª–æ —Ä–µ—Å—É—Ä—Å–∏
    writeStream.end('ERROR ON READING FILE'); // –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –≤ –∫—ñ–Ω–µ—Ü—å —Ñ–∞–π–ª—É –∑–∞–ø–∏—à–µ –Ω–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    // handle error
  })
  .pipe(writeStream) // pipe —Å–∞–º –≤—ñ–¥—Ä–∞–∑—É –ø—Ä–æ–∫–∏–Ω–µ chunk –≤ writeStream

// read, write, duplex - —á–∏—Ç–∞—î (read) —ñ –∑–∞–ø–∏—Å—É—î (write) –æ–¥–Ω–æ—á–∞—Å–Ω–æ, transform - —Ü–µ —á–æ—Ç–∏—Ä–∏ —Ç–∏–ø–∏ —Å—Ç—Ä—ñ–º—ñ–≤!!!


// EXPRESS - —Ñ—Ä–µ–π–º–≤—Ä–æ–∫, –¥–∞—î –∑–º–æ–≥—É –ø—ñ–¥–Ω—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä –Ω–∞ –Ω–æ–¥—ñ,
// DNS - domain name system —Ü–µ –∫–æ–ª–∏ –º–∏ –ø–∏—à–µ–º–æ google.com –∞–ª–µ –Ω–∞ —Å–ø–∞—Ä–∞–≤–¥—ñ —ñ–¥–µ–º–æ –Ω–∞ –ø–µ–≤–Ω–∏–π IP 128.93.350.5

const express = require('express') // –≤–∏—Ç—è–≥—É—î–º–æ —ñ —ñ–Ω—Å—Ç–∞–ª–∏–º–æ
const app = express(); // –ø–∏—à–µ–º–æ app –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –ø–æ–¥–∞–ª—å—à–æ–º—É, –≤–∂–µ —è–∫ –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó

const users = [
    {
        name: 'Oleh',
        age: 20,
        gender: 'male'
    },
    {
        name: 'Anton',
        age: 10,
        gender: 'male'
    },
    {
        name: 'Inokentiy',
        age: 25,
        gender: 'female'
    },
    {
        name: 'Anastasiya',
        age: 15,
        gender: 'female'
    },
    {
        name: 'Cocos',
        age: 25,
        gender: 'other',
    },
]


app.use(express.json()); // —Ü—ñ –¥–≤–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–ª—è —Ç–æ–≥–æ —â–æ–± –Ω–∞—à–∞ –∞–ø–∫–∞ –º–æ–≥–ª–∞ —á–∏—Ç–∞—Ç–∏ body —ñ –∫–≤–µ—Ä—ñ
app.use(express.urlencoded({extended: true}))

// CRUD - create, read, update, delete

app.get('/users', (req, res) => {
    res.status(200).json(users) // res —Ü–µ —Ç–µ —â–æ –º–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç—É
})

app.get('/users/:id', (req, res) => {
    const { id } = req.params; // req.params –¥–æ—Å—Ç–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ —É—Ä–ª–∏, –∞ –æ—Å—å —Ü–µ :id —ñ —î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —ñ –≤–æ–Ω–∏ –∑–∞–≤–∂–¥–∏ —É
    // –≤–∏–≥–ª—è–¥—ñ —Å—Ç—Ä—ñ—á–∫–∏

    res.status(200).json(users[+id]);
})

app.post('/users', (req, res)=>{
    users.push(req.body); // req.body —Ç–µ —â–æ –Ω–∞–º –ø–µ—Ä–µ–¥–∞—î –∫–ª—ñ—î–Ω—Ç –≤ body

    res.status(201).json({
        message: "User created." // –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫–µ –æ—Ç—Ä–∏–º–∞—î —Ñ—Ä–æ–Ω—Ç/–∫–ª—ñ—î–Ω—Ç
    });
})

app.put('/users/:id', (req, res)=>{
    const { id } = req.params;

    users[+id] = req.body;

    res.status(200).json({
        message: 'User updated',
        data: users[+id], // –º–æ–∂–µ–º–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ –æ–±—î–∫—Ç
    })
})

app.delete('/users/:id', (req, res)=>{
    const { id } = req.params;

    users.splice(+id, 1);

    res.status(200).json({
        message: 'User deleted',
    })
})

const PORT = 5001; // –ø–æ –¥–µ—Ñ–æ–ª—Ç—É –Ω–∞—à –ª–æ–∫–∞–ª—Ö–æ—Å—Ç —Ü–µ 127.0.0.1, –∞ –≤ –ø–æ—î–¥–Ω–∞–Ω—ñ –∑ –ø–æ—Ä—Ç–æ–º 127.0.0.1:5001, –∞ —â–µ –¥–∞–ª—ñ
// 127.0.0.1:5001/users

app.listen(PORT, () => {
    console.log(`Server has started on PORT ${PORT} ü•∏`)
}) // –±—É–¥–µ —Å–ª—É—Ö–∞—Ç–∏ –ø–æ—Ä—Ç, —Ç–æ–ø—Ç–æ —ñ–≤–µ–Ω—Ç–ª—É–ø –±—É–¥–µ –∑–∞–≤–∂–¥–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —ñ —á–µ–∫–∞—Ç–∏ –Ω–∞ –Ω–æ–≤—ñ —Ä–µ–∫–≤–µ—Å—Ç–∏ —â–æ–± —ó—Ö –æ–±—Ä–æ–±–∏—Ç–∏
